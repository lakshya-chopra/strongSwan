connections {

    conn {

        local_addrs = 192.168.6.232
        remote_addrs = 192.168.6.233

        version = 2

        local {
            auth = pubkey
            certs = client.crt
            id = "CN=192.168.6.232"
        }


        remote {
            auth = pubkey
            certs = server.crt
            id = "CN=192.168.6.233"
            cacerts = caCert.crt
        }

        # Use Aggressive Mode in IKEv1.
        aggressive = no

        # Use childless IKE_SA initiation (allow, prefer, force or never).
        childless = allow

        # Send certificate requests payloads (yes or no).
        send_certreq = yes

        # Send certificate payloads (always, never or ifasked).
        send_cert = ifasked

        # String identifying the Postquantum Preshared Key (PPK) to be used.
        ppk_id = ppk128

        # Whether a Postquantum Preshared Key (PPK) is required for this
        # connection.
        ppk_required = yes

        # Number of retransmission sequences to perform during initial connect.
        keyingtries = 2

        # Connection uniqueness policy (never, no, keep or replace).
        unique = keep

        # Time to schedule IKE reauthentication.
        reauth_time = 0s

        # Time to schedule IKE rekeying.
        rekey_time = 1h

        children {

            child {

                # ESP proposals to offer for the CHILD_SA.
                esp_proposals = default

                local_ts = 10.1.0.0/24

                # Remote selectors to include in CHILD_SA.
                remote_ts = 10.2.0.0/24

                # Time to schedule CHILD_SA rekeying.
                # rekey_time = 1h or life_time - 10%

                # Maximum lifetime before CHILD_SA gets closed, as time.
                # life_time = rekey_time + 10%

                # Range of random time to subtract from rekey_time.
                # rand_time = life_time - rekey_time

                # Number of bytes processed before initiating CHILD_SA rekeying.
                # rekey_bytes = 0 or life_bytes - 10%

                # Maximum bytes processed before CHILD_SA gets closed.
                # life_bytes = rekey_bytes + 10%

                # Range of random bytes to subtract from rekey_bytes.
                # rand_bytes = life_bytes - rekey_bytes

                # Number of packets processed before initiating CHILD_SA
                # rekeying.
                # rekey_packets = 0 or life_packets - 10%

                # Maximum number of packets processed before CHILD_SA gets
                # closed.
                # life_packets = rekey_packets + 10%

                # Range of random packets to subtract from packets_bytes.
                # rand_packets = life_packets - rekey_packets

                # Updown script to invoke on CHILD_SA up and down events.
                # updown =

                # Hostaccess variable to pass to updown script.
                # hostaccess = no

                # IPsec Mode to establish (tunnel, transport, transport_proxy,
                # beet, pass or drop).
                mode = tunnel

                # Whether to install IPsec policies or not.
                policies = yes

                # Whether to install outbound FWD IPsec policies or not.
                # policies_fwd_out = no

                # Action to perform on DPD timeout (clear, trap or restart).
                # dpd_action = clear

                # Enable IPComp compression before encryption.
                # ipcomp = no

                # Timeout before closing CHILD_SA after inactivity.
                # inactivity = 0s

                # Fixed reqid to use for this CHILD_SA.
                # reqid = 0

                # Optional fixed priority for IPsec policies.
                # priority = 0

                # Optional interface name to restrict IPsec policies.
                # interface =

                # Netfilter mark and mask for input traffic.
                # mark_in = 0/0x00000000

                # Whether to set *mark_in* on the inbound SA.
                # mark_in_sa = no

                # Netfilter mark and mask for output traffic.
                # mark_out = 0/0x00000000

                # Netfilter mark applied to packets after the inbound IPsec SA
                # processed them.
                # set_mark_in = 0/0x00000000

                # Netfilter mark applied to packets after the outbound IPsec SA
                # processed them.
                # set_mark_out = 0/0x00000000

                # Inbound XFRM interface ID (32-bit unsigned integer).
                # if_id_in = 0

                # Outbound XFRM interface ID (32-bit unsigned integer).
                # if_id_out = 0

                # Optional security label (e.g. SELinux context), IKEv2 only.
                # Refer to label_mode for details on how labels are processed.
                # label =

                # Security label mode (system, simple or selinux), IKEv2 only.
                # label_mode = system

                # Traffic Flow Confidentiality padding.
                # tfc_padding = 0

                # IPsec replay window to configure for this CHILD_SA.
                # replay_window = 32

                # Enable hardware offload for this CHILD_SA, if supported by the
                # IPsec implementation.
                # hw_offload = no

                # Whether to copy the DF bit to the outer IPv4 header in tunnel
                # mode.
                # copy_df = yes

                # Whether to copy the ECN header field to/from the outer IP
                # header in tunnel mode.
                # copy_ecn = yes

                # Whether to copy the DSCP header field to/from the outer IP
                # header in tunnel mode.
                # copy_dscp = out

                # Action to perform after loading the configuration (none, trap,
                # start).
                # start_action = none

                # Action to perform after a CHILD_SA gets closed (none, trap,
                # start).
                # close_action = none

            }

        }

    }

}

secrets {

    ppk128 {

        secret = 0x6fa7def5b4fe78d1e86a6b0f1fb90d0555f9419f5b4d7e0cbb7e02f275d66391
        id = ppk128

        id1 = "192.168.6.232"
        id2 = "192.168.6.233"

    }

}

# Section defining named pools.
# pools {

    # Section defining a single pool with a unique name.
    # <name> {

        # Addresses allocated in pool.
        # addrs =

        # Comma separated list of additional attributes from type <attr>.
        # <attr> =

    # }

# }

log {
    ike = 3
    net = 3
    knl = 3
}


# Section defining attributes of certification authorities.
# authorities {

    # Section defining a certification authority with a unique name.
    # <name> {

        # CA certificate belonging to the certification authority.
        # cacert =

        # Absolute path to the certificate to load.
        # file =

        # Hex-encoded CKA_ID of the CA certificate on a token.
        # handle =

        # Optional slot number of the token that stores the CA certificate.
        # slot =

        # Optional PKCS#11 module name.
        # module =

        # Comma-separated list of CRL distribution points.
        # crl_uris =

        # Comma-separated list of OCSP URIs.
        # ocsp_uris =

        # Defines the base URI for the Hash and URL feature supported by IKEv2.
        # cert_uri_base =

#    }

#}

# Include config snippets
include conf.d/*.conf
